# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.


from numpy import full


class Cell:
    def __init__(self, particle):
        if int(particle):
            self.particle = particle
        else: 
            print('Ячейка принимает только целое число') 

    def __add__(self, other):
        return Cell(self.particle + other.particle)

    def __sub__(self, other):
        if self.particle > other.particle:
            return Cell(self.particle - other.particle)
        elif self.particle == other.particle:
            print('У клеток одинаковое количество ячеек')
        else: 
            print('У первой клетки меньше клеток чем у второй')

    def __mul__(self, other):
        return Cell(self.particle*other.particle)

    def __truediv__(self, other):
        if self.particle > other.particle:
            return Cell(self.particle//other.particle)
        else:
            print('Нельзя делить меньшую клетку на большую')

    def make_order(self, order):
        full_list = []
        nums = []
        for _ in range(0, self.particle+self.particle//order):
            if len(nums) < order:
                nums.append('*')

            else:
                nums.append('\n')
                full_list.extend(nums)
                nums = []
        if nums:
            full_list.extend(nums)
        string = ''.join(full_list)
        return string
        


a = Cell(23)
b =Cell(10)
c = a*b
d = a+b
e = a/b
f = a - b
print(a.particle)
print(c.particle)
print(d.particle)
print(e.particle)
print(f.particle)
print(a.make_order(11))
print(c.make_order(15))


                
            
        


